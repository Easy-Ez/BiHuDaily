package cn.ml.saddhu.bihudaily.engine.encrypt;

import java.io.IOException;
import java.io.UnsupportedEncodingException;

/**
 * Created by sadhu on 2017/3/25.
 * Email static.sadhu@gmail.com
 * Describe:
 */

public class A {
    private static final boolean a;
    private static final byte[] b;
    private static final byte[] c;
    private static final byte[] d;
    private static final byte[] e;
    private static final byte[] f;
    private static final byte[] g;

    static {
        int v2 = 256;
        int v1 = 64;
        a = !A.class.desiredAssertionStatus() ? true : false;
        b = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
        c = new byte[]{-9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, -9, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, -9, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9};
        d = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95};
        e = new byte[]{-9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 62, -9, -9, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -9, -9, -9, -1, -9, -9, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -9, -9, -9, -9, 63, -9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9};
        f = new byte[]{45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122};
        g = new byte[]{-9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -5, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -5, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 0, -9, -9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -9, -9, -9, -1, -9, -9, -9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, -9, -9, -9, -9, 37, -9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9};
    }

    private A() {
        super();
    }

    public static String a(byte[] arg3) {
        return a(arg3, arg3.length);
    }

    private static String a(byte[] arg7, int arg8) {
        String v0_2 = "";
        byte[] v0_1;
        int v6 = 3;
        if (arg7 == null) {
            throw new NullPointerException("Cannot serialize A null array.");
        }

        if (arg8 < 0) {
            throw new IllegalArgumentException("Cannot have length offset: " + arg8);
        }

        if (arg8 > arg7.length) {
            throw new IllegalArgumentException(String.format("Cannot have offset of %d and length of %d with array of length %d", Integer.valueOf(0), Integer.valueOf(arg8), Integer.valueOf(arg7.length)));
        }

        int v2 = arg8 / 3 * 4;
        int v0 = arg8 % 3 > 0 ? 4 : 0;
        byte[] v3_1 = new byte[v0 + v2];
        int v4 = arg8 - 2;
        v0 = 0;
        v2 = 0;
        while (v2 < v4) {
            a(arg7, v2, v6, v3_1, v0);
            v2 += 3;
            v0 += 4;
        }

        if (v2 < arg8) {
            a(arg7, v2, arg8 - v2, v3_1, v0);
            v0 += 4;
        }

        if (v0 <= v3_1.length - 1) {
            byte[] v2_1 = new byte[v0];
            System.arraycopy(v3_1, 0, v2_1, 0, v0);
            v0_1 = v2_1;
        } else {
            v0_1 = v3_1;
        }

        try {
            v0_2 = new String(v0_1, "US-ASCII");
        } catch (UnsupportedEncodingException v1) {
            v0_2 = new String(v0_2.getBytes());
        }

        return v0_2;
    }

    private static byte[] a(byte[] arg5, int arg6, int arg7, byte[] arg8, int arg9) {
        byte v4 = 61;
        int v0 = 0;
        byte[] v3 = b;
        int v2 = arg7 > 0 ? arg5[arg6] << 24 >>> 8 : 0;
        int v1 = arg7 > 1 ? arg5[arg6 + 1] << 24 >>> 16 : 0;
        v1 |= v2;
        if (arg7 > 2) {
            v0 = arg5[arg6 + 2] << 24 >>> 24;
        }

        v0 |= v1;
        switch (arg7) {
            case 1: {
                arg8[arg9] = v3[v0 >>> 18];
                arg8[arg9 + 1] = v3[v0 >>> 12 & 63];
                arg8[arg9 + 2] = v4;
                arg8[arg9 + 3] = v4;
                break;
            }
            case 2: {
                arg8[arg9] = v3[v0 >>> 18];
                arg8[arg9 + 1] = v3[v0 >>> 12 & 63];
                arg8[arg9 + 2] = v3[v0 >>> 6 & 63];
                arg8[arg9 + 3] = v4;
                break;
            }
            case 3: {
                arg8[arg9] = v3[v0 >>> 18];
                arg8[arg9 + 1] = v3[v0 >>> 12 & 63];
                arg8[arg9 + 2] = v3[v0 >>> 6 & 63];
                arg8[arg9 + 3] = v3[v0 & 63];
                break;
            }
        }

        return arg8;
    }
}
