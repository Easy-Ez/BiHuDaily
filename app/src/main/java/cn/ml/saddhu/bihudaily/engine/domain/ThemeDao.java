package cn.ml.saddhu.bihudaily.engine.domain;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THEME".
*/
public class ThemeDao extends AbstractDao<Theme, Long> {

    public static final String TABLENAME = "THEME";

    /**
     * Properties of entity Theme.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Color = new Property(0, int.class, "color", false, "COLOR");
        public final static Property Thumbnail = new Property(1, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property _id = new Property(3, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(4, long.class, "id", false, "ID");
        public final static Property OwerId = new Property(5, long.class, "owerId", false, "OWER_ID");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property IsSubscribe = new Property(7, boolean.class, "isSubscribe", false, "IS_SUBSCRIBE");
    }

    private Query<Theme> userInfo_ThemesQuery;

    public ThemeDao(DaoConfig config) {
        super(config);
    }
    
    public ThemeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THEME\" (" + //
                "\"COLOR\" INTEGER NOT NULL ," + // 0: color
                "\"THUMBNAIL\" TEXT," + // 1: thumbnail
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 3: _id
                "\"ID\" INTEGER NOT NULL ," + // 4: id
                "\"OWER_ID\" INTEGER NOT NULL ," + // 5: owerId
                "\"NAME\" TEXT," + // 6: name
                "\"IS_SUBSCRIBE\" INTEGER NOT NULL );"); // 7: isSubscribe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THEME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Theme entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getColor());
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(2, thumbnail);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(4, _id);
        }
        stmt.bindLong(5, entity.getId());
        stmt.bindLong(6, entity.getOwerId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getIsSubscribe() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Theme entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getColor());
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(2, thumbnail);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(4, _id);
        }
        stmt.bindLong(5, entity.getId());
        stmt.bindLong(6, entity.getOwerId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getIsSubscribe() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public Theme readEntity(Cursor cursor, int offset) {
        Theme entity = new Theme( //
            cursor.getInt(offset + 0), // color
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thumbnail
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // _id
            cursor.getLong(offset + 4), // id
            cursor.getLong(offset + 5), // owerId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.getShort(offset + 7) != 0 // isSubscribe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Theme entity, int offset) {
        entity.setColor(cursor.getInt(offset + 0));
        entity.setThumbnail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.set_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setId(cursor.getLong(offset + 4));
        entity.setOwerId(cursor.getLong(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSubscribe(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Theme entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Theme entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Theme entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "themes" to-many relationship of UserInfo. */
    public List<Theme> _queryUserInfo_Themes(long owerId) {
        synchronized (this) {
            if (userInfo_ThemesQuery == null) {
                QueryBuilder<Theme> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OwerId.eq(null));
                userInfo_ThemesQuery = queryBuilder.build();
            }
        }
        Query<Theme> query = userInfo_ThemesQuery.forCurrentThread();
        query.setParameter(0, owerId);
        return query.list();
    }

}
