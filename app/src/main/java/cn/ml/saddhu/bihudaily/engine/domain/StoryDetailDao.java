package cn.ml.saddhu.bihudaily.engine.domain;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.ml.saddhu.bihudaily.engine.dbconverter.StringConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORY_DETAIL".
*/
public class StoryDetailDao extends AbstractDao<StoryDetail, Long> {

    public static final String TABLENAME = "STORY_DETAIL";

    /**
     * Properties of entity StoryDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Body = new Property(0, String.class, "body", false, "BODY");
        public final static Property Image_source = new Property(1, String.class, "image_source", false, "IMAGE_SOURCE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Share_url = new Property(4, String.class, "share_url", false, "SHARE_URL");
        public final static Property Ga_prefix = new Property(5, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property SectionId = new Property(6, long.class, "sectionId", false, "SECTION_ID");
        public final static Property ThemeId = new Property(7, long.class, "themeId", false, "THEME_ID");
        public final static Property Type = new Property(8, int.class, "type", false, "TYPE");
        public final static Property Id = new Property(9, Long.class, "id", true, "_id");
        public final static Property Css = new Property(10, String.class, "css", false, "CSS");
    }

    private DaoSession daoSession;

    private final StringConverter cssConverter = new StringConverter();

    public StoryDetailDao(DaoConfig config) {
        super(config);
    }
    
    public StoryDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY_DETAIL\" (" + //
                "\"BODY\" TEXT," + // 0: body
                "\"IMAGE_SOURCE\" TEXT," + // 1: image_source
                "\"TITLE\" TEXT," + // 2: title
                "\"IMAGE\" TEXT," + // 3: image
                "\"SHARE_URL\" TEXT," + // 4: share_url
                "\"GA_PREFIX\" TEXT," + // 5: ga_prefix
                "\"SECTION_ID\" INTEGER NOT NULL ," + // 6: sectionId
                "\"THEME_ID\" INTEGER NOT NULL ," + // 7: themeId
                "\"TYPE\" INTEGER NOT NULL ," + // 8: type
                "\"_id\" INTEGER PRIMARY KEY ," + // 9: id
                "\"CSS\" TEXT);"); // 10: css
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoryDetail entity) {
        stmt.clearBindings();
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(1, body);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(2, image_source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(6, ga_prefix);
        }
        stmt.bindLong(7, entity.getSectionId());
        stmt.bindLong(8, entity.getThemeId());
        stmt.bindLong(9, entity.getType());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(10, id);
        }
 
        List css = entity.getCss();
        if (css != null) {
            stmt.bindString(11, cssConverter.convertToDatabaseValue(css));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoryDetail entity) {
        stmt.clearBindings();
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(1, body);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(2, image_source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(5, share_url);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(6, ga_prefix);
        }
        stmt.bindLong(7, entity.getSectionId());
        stmt.bindLong(8, entity.getThemeId());
        stmt.bindLong(9, entity.getType());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(10, id);
        }
 
        List css = entity.getCss();
        if (css != null) {
            stmt.bindString(11, cssConverter.convertToDatabaseValue(css));
        }
    }

    @Override
    protected final void attachEntity(StoryDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9);
    }    

    @Override
    public StoryDetail readEntity(Cursor cursor, int offset) {
        StoryDetail entity = new StoryDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // body
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image_source
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // share_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ga_prefix
            cursor.getLong(offset + 6), // sectionId
            cursor.getLong(offset + 7), // themeId
            cursor.getInt(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // id
            cursor.isNull(offset + 10) ? null : cssConverter.convertToEntityProperty(cursor.getString(offset + 10)) // css
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoryDetail entity, int offset) {
        entity.setBody(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImage_source(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShare_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGa_prefix(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSectionId(cursor.getLong(offset + 6));
        entity.setThemeId(cursor.getLong(offset + 7));
        entity.setType(cursor.getInt(offset + 8));
        entity.setId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setCss(cursor.isNull(offset + 10) ? null : cssConverter.convertToEntityProperty(cursor.getString(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoryDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoryDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoryDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSectionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getThemeDao().getAllColumns());
            builder.append(" FROM STORY_DETAIL T");
            builder.append(" LEFT JOIN SECTION T0 ON T.\"SECTION_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN THEME T1 ON T.\"THEME_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected StoryDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        StoryDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Section section = loadCurrentOther(daoSession.getSectionDao(), cursor, offset);
         if(section != null) {
            entity.setSection(section);
        }
        offset += daoSession.getSectionDao().getAllColumns().length;

        Theme theme = loadCurrentOther(daoSession.getThemeDao(), cursor, offset);
         if(theme != null) {
            entity.setTheme(theme);
        }

        return entity;    
    }

    public StoryDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<StoryDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StoryDetail> list = new ArrayList<StoryDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<StoryDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<StoryDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
