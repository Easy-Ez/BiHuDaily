package cn.ml.saddhu.bihudaily.engine.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOP_STORY".
*/
public class TopStoryDao extends AbstractDao<TopStory, String> {

    public static final String TABLENAME = "TOP_STORY";

    /**
     * Properties of entity TopStory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Image = new Property(0, String.class, "image", false, "IMAGE");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Id = new Property(2, String.class, "id", true, "ID");
        public final static Property Ga_prefix = new Property(3, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
    }


    public TopStoryDao(DaoConfig config) {
        super(config);
    }
    
    public TopStoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOP_STORY\" (" + //
                "\"IMAGE\" TEXT," + // 0: image
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 2: id
                "\"GA_PREFIX\" TEXT," + // 3: ga_prefix
                "\"TITLE\" TEXT);"); // 4: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOP_STORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopStory entity) {
        stmt.clearBindings();
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(1, image);
        }
        stmt.bindLong(2, entity.getType());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(4, ga_prefix);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopStory entity) {
        stmt.clearBindings();
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(1, image);
        }
        stmt.bindLong(2, entity.getType());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(4, ga_prefix);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public TopStory readEntity(Cursor cursor, int offset) {
        TopStory entity = new TopStory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // image
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ga_prefix
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopStory entity, int offset) {
        entity.setImage(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGa_prefix(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TopStory entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(TopStory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TopStory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
